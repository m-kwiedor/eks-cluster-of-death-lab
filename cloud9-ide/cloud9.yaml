---
AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation template for Cloud 9 creation and setup
Parameters:
  C9InstanceType:
    Type: String
    Description: Example Cloud9 instance type
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
  C9InstanceVolumeSize: 
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume. 
    Default: 15

Resources:
  ################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - C9LambdaPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                Resource: "*"

  C9K8sDevRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
      Path: "/"

  C9K8sDevGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - C9K8sDevGroupPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt C9K8sDevRole.Arn
      Path: "/"

  C9K8sDevUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref C9K8sDevGroup
      UserName: !Sub dev-user-${AWS::StackName}

  ################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
      - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      ServiceToken:
        Fn::GetAtt:
          - C9BootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: C9Instance
      LabIdeInstanceProfileName:
        Ref: C9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
          - C9InstanceProfile
          - Arn

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - C9LambdaExecutionRole
          - Arn
      Runtime: python3.6
      MemorySize: 256
      Timeout: 900
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info('event: {}'.format(event))
              logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          logger.info('instance_state: {}'.format(instance_state))

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')

              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

  ################## SSM BOOTSRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  C9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
                - "#!/bin/bash"
                - set -x
                - date
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - . /home/ec2-user/.bashrc
                - yum -y install jq strace gcc glibc-static python3 python3-pip gettext bash-completion moreutils
                - sudo wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq                - echo '=== Setting default values'
                - !Sub export PROJECT_ID=${AWS::StackName}
                - !Sub echo "export PROJECT_ID=${AWS::StackName}" | tee -a /home/ec2-user/.bash_profile
                - export EC2_ROLE_ARN=$(aws sts get-caller-identity --query 'Arn' --output text)
                - echo "export EC2_ROLE_ARN=${EC2_ROLE_ARN}" | tee -a /home/ec2-user/.bash_profile
                - IFS='/' read -ra TEMP_ROLE <<< ${EC2_ROLE_ARN}
                - export EC2_ROLE=${TEMP_ROLE[1]}
                - echo "export EC2_ROLE=${EC2_ROLE}" | tee -a /home/ec2-user/.bash_profile
                - echo '=== Resizing the Instance volume'
                - !Sub SIZE=${C9InstanceVolumeSize}
                - !Sub REGION=${AWS::Region}
                - |
                  INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                  VOLUMEID=$(aws ec2 describe-instances \
                    --instance-id $INSTANCEID \
                    --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
                    --output text --region $REGION)
                  aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE --region $REGION
                  while [ \
                    "$(aws ec2 describe-volumes-modifications \
                      --volume-id $VOLUMEID \
                      --filters Name=modification-state,Values="optimizing","completed" \
                      --query "length(VolumesModifications)"\
                      --output text --region $REGION)" != "1" ]; do
                  sleep 1
                  done
                  if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
                  then
                    sudo growpart /dev/xvda 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/xvda1
                    fi
                  else
                    sudo growpart /dev/nvme0n1 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/nvme0n1p1
                    fi
                  fi                
                - echo '=== CONFIGURE default python version ==='
                - PATH=$PATH:/usr/bin
                - alternatives --set python /usr/bin/python3.6
                - echo '=== INSTALL and CONFIGURE default software components ==='
                - pip install --user -U boto boto3 botocore aws-sam-cli git-remote-codecommit
                - echo '=== UPDATE AWSCLI ==='
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - sudo ./aws/install
                - rm -rf awscliv2.zip
                - echo '=== CONFIGURE awscli and setting ENVIRONMENT VARS ==='
                - echo "complete -C '/usr/local/bin/aws_completer' aws" >> /home/ec2-user/.bashrc
                - echo 'PATH=$PATH:/usr/local/bin' >> /home/ec2-user/.bashrc
                - echo 'export PATH' >> /home/ec2-user/.bashrc
                - echo '=== CONFIGURE kubecrtl and setting ENVIRONMENT VARS ==='
                - sudo curl --silent --location -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
                - sudo chmod +x /usr/bin/kubectl
                - sudo -H -u ec2-user bash -c "kubectl completion bash >>  ~/.bash_completion"
                - sudo -H -u ec2-user bash -c ". /etc/profile.d/bash_completion.sh"
                - sudo -H -u ec2-user bash -c ". ~/.bash_completion"
                - echo '=== CONFIGURE eksctl and setting ENVIRONMENT VARS ==='
                - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                - sudo mv /tmp/eksctl /usr/bin
                - sudo -H -u ec2-user bash -c "eksctl completion bash >> ~/.bash_completion"
                - sudo -H -u ec2-user bash -c ". /etc/profile.d/bash_completion.sh"
                - sudo -H -u ec2-user bash -c ". ~/.bash_completion"
                - echo '=== SET THE AWS Load Balancer Controller Version ==='
                - echo 'export LBC_VERSION="v2.2.0"' >> /home/ec2-user/.bash_profile
                - sudo -H -u ec2-user bash -c ". /home/ec2-user/.bash_profile"
                - echo '=== EXPORT ACCOUNT ID, REGION AND AZS ==='
                - export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
                - echo "export ACCOUNT_ID=${ACCOUNT_ID}" | tee -a /home/ec2-user/.bash_profile
                - export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
                - echo "export AWS_REGION=${AWS_REGION}" | tee -a /home/ec2-user/.bash_profile
                - export AZ1=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[0].ZoneName' --output text --region $AWS_REGION)
                - echo "export AZ1=${AZ1}" | tee -a /home/ec2-user/.bash_profile
                - export AZ2=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[1].ZoneName' --output text --region $AWS_REGION)
                - echo "export AZ2=${AZ2}" | tee -a /home/ec2-user/.bash_profile
                - export AZ3=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[2].ZoneName' --output text --region $AWS_REGION)
                - echo "export AZ3=${AZ3}" | tee -a /home/ec2-user/.bash_profile
                - sudo -H -u ec2-user bash -c ". /home/ec2-user/.bash_profile"
                - echo '=== CONFIGURE REGION AND REMOVE CREDENTIALS ==='
                - sudo -H -u ec2-user bash -c "aws configure set default.region ${AWS_REGION}"
                - sudo -H -u ec2-user bash -c "aws configure get default.region"
                - echo '=== CLONE THE DEMO REPOSITORY ==='
                - sudo -H -u ec2-user bash -c "git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/jpmc-eks-test /home/ec2-user/environment/eks"
                - echo '=== CREATE THE KMS KEY ==='
                - aws kms create-alias --alias-name alias/eks_$PROJECT_ID --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text)
                - export MASTER_ARN=$(aws kms describe-key --key-id alias/eks_$PROJECT_ID --query KeyMetadata.Arn --output text)
                - echo "export MASTER_ARN=${MASTER_ARN}" | tee -a /home/ec2-user/.bash_profile
                - sudo -H -u ec2-user bash -c ". /home/ec2-user/.bash_profile"
                - echo '=== CREATE THE EKS CLUSTER ==='
                - envsubst < /home/ec2-user/environment/eks/eks-templates/eks-cluster-temp.yaml > /home/ec2-user/environment/eks/eks-templates/eks-cluster.yaml
                - sudo -H -u ec2-user bash -c "eksctl create cluster -f /home/ec2-user/environment/eks/eks-templates/eks-cluster.yaml"
                - sudo -H -u ec2-user bash -c "aws eks update-kubeconfig --name ${PROJECT_ID}"
                - echo '=== CREATE THE DEMO ENVIRONEMNT ==='
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-nodejs/kubernetes/deployment.yaml"
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-nodejs/kubernetes/service.yaml"
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-crystal/kubernetes/deployment.yaml"
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-crystal/kubernetes/service.yaml"
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-frontend/kubernetes/deployment.yaml"
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/ecsdemo-frontend/kubernetes/service.yaml"
                - sudo -H -u ec2-user bash -c "kubectl scale deployment ecsdemo-nodejs --replicas=1"
                - sudo -H -u ec2-user bash -c "kubectl scale deployment ecsdemo-crystal --replicas=1"
                - sudo -H -u ec2-user bash -c "kubectl scale deployment ecsdemo-frontend --replicas=1"
                - echo '=== CREATING README ==='
                - sudo -H -u ec2-user bash -c "export FRONTEND_SERVICE=$(kubectl get svc -o json | jq -r '.items[] | select(.spec.type==""LoadBalancer"") | .status.loadBalancer.ingress[].hostname')"
                - !Join 
                  - ''
                  - - export K8_DEV_ROLE_ARN=
                    - !GetAtt C9K8sDevRole.Arn
                - echo "export K8_DEV_ROLE_ARN=${K8_DEV_ROLE_ARN}" | tee -a /home/ec2-user/.bash_profile
                - !Join 
                  - ''
                  - - export K8_DEV_GROUP_ARN=
                    - !GetAtt C9K8sDevGroup.Arn
                - echo "export K8_DEV_GROUP_ARN=${K8_DEV_GROUP_ARN}" | tee -a /home/ec2-user/.bash_profile
                - !Join 
                  - ''
                  - - export K8_DEV_USERNAME=
                    - !Ref C9K8sDevUser
                - echo "export K8_DEV_USERNAME=${K8_DEV_USERNAME}" | tee -a /home/ec2-user/.bash_profile
                - sudo -H -u ec2-user bash -c ". /home/ec2-user/.bash_profile"
                - rm -f /home/ec2-user/environment/README.md
                - envsubst < /home/ec2-user/environment/eks/README.md > /home/ec2-user/environment/README.md                
                - rm -f /home/ec2-user/environment/eks/README.md
                - !Sub aws iam create-access-key --user-name ${C9K8sDevUser} | tee /home/ec2-user/environment/eks/${C9K8sDevUser}-credentials.json
                - echo '=== CREATING EKS TROUBLE ==='
                - export EKS_NODEGROUP=$(aws eks list-nodegroups --cluster-name $PROJECT_ID --query 'nodegroups[0]' --output text)
                - export NODE_INSTANCE_ROLE=$(aws eks describe-nodegroup --cluster-name $PROJECT_ID --nodegroup-name $EKS_NODEGROUP --output text --query 'nodegroup.nodeRole')
                - envsubst < /home/ec2-user/environment/eks/eks-templates/eks-auth-cn-temp.yaml > /home/ec2-user/environment/eks/eks-templates/eks-auth-cn.yaml
                - sudo -H -u ec2-user bash -c "kubectl apply -f /home/ec2-user/environment/eks/eks-templates/eks-auth-cn.yaml"
                - unset EKS_NODEGROUP
                - unset NODE_INSTANCE
                - echo '=== CLEANING /home/ec2-user ==='
                - rm -f /home/ec2-user/environment/eks/eks-templates/eks-cluster-temp.yaml
                - rm -f /home/ec2-user/environment/eks/eks-templates/eks-auth-cn-temp.yaml
                - sudo chown -R ec2-user:ec2-user /home/ec2-user/
                - echo '=== REMOVE EKS CREDENTIALS ==='
                - echo '=== PREPARE REBOOT in 1 minute with at ==='
                - FILE=$(mktemp) && echo $FILE && echo '#!/bin/bash' > $FILE && echo 'reboot -f --verbose' >> $FILE && at now + 1 minute -f $FILE
                - echo "Bootstrap completed with return code $?"

  C9BootstrapAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref C9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:StackName
          Values:
            - !Ref AWS::StackName

  ################## INSTANCE #####################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: C9Role

  C9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn: C9BootstrapAssociation
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 3600
      InstanceType:
        Ref: C9InstanceType
      Name:
        Ref: AWS::StackName
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: AWS::Region
          - ".console.aws.amazon.com/cloud9/ide/"
          - Ref: C9Instance
          - "?region="
          - Ref: AWS::Region
